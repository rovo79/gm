<?php

/**
 * @file
 * Enables administrators to annotate their structured content with vocabularies
 * from schema.org
 */

/**
 * Implements hook_help().
 */
function schemaorg_help($path, $arg) {
  switch ($path) {
    case 'admin/help#schemaorg':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('<a href="@schemaorg">Schema.org</a> provides a collection of schemas useful for site builders and administrators to annotate their pages in ways recognized by major search engines including Bing, Google and Yahoo!. These semantic annotations allow search providers to improve the display of search results, making it easier for people to find what they are looking for on the Web. ', array('@schemaorg' => 'http://schema.org/')) . '</p>';
      $output .= '<p>' . t('Each of your <a href="@content_types">content types</a> and their fields can be mapped to schema.org vocabularies. The type (e.g. Event) and the property of the title (e.g. name) are defined in the edit form of each content type, in the "Schema.org" vertical tab. The property of each field can be set when editing a field, in the schema.org fieldset.', array('@content_types' => url('admin/structure/types'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemaorg_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    $bundle = $form['#node_type']->type;
    $form['schemaorg'] = array(
      '#type' => 'fieldset',
      '#title' => t('Schema.org settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['schemaorg']['schemaorg_type'] = array(
      '#type' => 'textfield',
      '#title' => t('Type'),
      '#description' => t('Specify the type you want to associated to this content type e.g. Article, Blog, etc.'),
      '#default_value' => schemaorg_term_load('node', $bundle, 'rdftype'),
      '#attributes' => array('class' => array('schemaorg-autocomplete-types')),
    );
    $form['#submit'][] = 'schemaorg_node_type_form_submit';
    // Use jQuery UI autocomplete to provide a faster autocomplete without
    // callback to the server.
    $form['#attached']['library'][] = array('system', 'ui.autocomplete');
    $form['#attached']['css'][] = drupal_get_path('module', 'schemaorg') . '/css/schemaorg.jquery.ui.theme.css';
    $form['#attached']['js'][] = drupal_get_path('module', 'schemaorg') . '/js/schemaorg.js';
    $form['#attached']['js'][] =  array(
          'data' => array('schemaorgapiTermsPath' => base_path() . drupal_get_path('module', 'schemaorg') . '/js/schemaorg.terms.json'),
          'type' => 'setting'
        );
  }
}

/**
 * Submit function for node type form.
 */
function schemaorg_node_type_form_submit($form, &$form_state) {
  $bundle = $form_state['values']['type'];
  $mapping = rdf_mapping_load('node', $bundle);
  $mapping['rdftype'] = schemaorg_terms_merge($form_state['values']['schemaorg_type'], $mapping['rdftype']);

  rdf_mapping_save(array(
    'type' => 'node',
    'bundle' => $bundle,
    'mapping' => $mapping,
    )
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemaorg_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $field_name = $form['#field']['field_name'];
  $bundle = $form['instance']['bundle']['#value'];
  $instance = $form['instance'];
  $label = isset($instance['label']) ? $instance['label']['#default_value'] : $instance['field_name'];
  $entity_type = $instance['entity_type']['#value'];
  $mapping = rdf_mapping_load($entity_type, $instance['bundle']['#value']);

  $form['schemaorg'] = array(
    '#type' => 'fieldset',
    '#title' => t('%label schema.org mapping', array('%label' => $label)),
  );

  $form['schemaorg']['schemaorg_field_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Property'),
    '#description' => t('Specify the property you want to associated to this field.'),
    '#default_value' => schemaorg_term_load($entity_type, $bundle, $field_name),
    '#attributes' => array('class' => array('schemaorg-autocomplete-properties')),
  );

  $form['#submit'][] = 'schemaorg_field_ui_field_edit_form_submit';
  // Use jQuery UI autocomplete to provide a faster autocomplete without
  // callback to the server.
  $form['#attached']['library'][] = array('system', 'ui.autocomplete');
  $form['#attached']['css'][] = drupal_get_path('module', 'schemaorg') . '/css/schemaorg.jquery.ui.theme.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'schemaorg') . '/js/schemaorg.js';
  $form['#attached']['js'][] =  array(
        'data' => array('schemaorgapiTermsPath' => base_path() . drupal_get_path('module', 'schemaorg') . '/js/schemaorg.terms.json'),
        'type' => 'setting'
  );
}

/**
 * Submit function for edit field form.
 */
function schemaorg_field_ui_field_edit_form_submit($form, &$form_state) {
  $entity_type = $form['#instance']['entity_type'];
  $bundle = $form['#instance']['bundle'];
  $field_name = $form['#field']['field_name'];
  $field_type = $form['#field']['type'];

  $mapping = rdf_mapping_load($entity_type, $bundle);

  // This field might not have an RDF mapping yet.
  if (empty($mapping[$field_name])) {
    $mapping[$field_name]['predicates'] = array();
  }

  $mapping[$field_name]['predicates'] = schemaorg_terms_merge($form_state['values']['schemaorg_field_property'], $mapping[$field_name]['predicates']);

  // Sets RDF mapping type in the case of fields where the object is a resource
  // such as image, file, etc.
  $rel_field_types = array('image', 'file', 'taxonomy_term_reference');
  if (in_array($field_type, $rel_field_types)) {
    $mapping[$field_name]['type'] = 'rel';
  }

  // Some terms from schema.org are not yet supported, and legacy properties
  // are being used instead. The legacy property is added to the RDF mappings
  // along with the official property.
  $property = $form_state['values']['schemaorg_field_property'];
  $legacy_properties = array(
    'description' => 'summary',
  );
  if (array_key_exists($property, $legacy_properties)) {
    array_unshift($mapping[$field_name]['predicates'], 'schema:' . $legacy_properties[$property]);
  }

  // Performs some maintenance tasks based on whether the mapping contains
  // schema.org terms or not.
  // Scans the mapping array to see if some fields are mapped to schema.org.
  $schemaorg_mappings = FALSE;
  // Some fields are ignored since they are not input by the user.
  $ignored_fields = array('title', 'name', 'url');
  foreach ($mapping as $field => $info) {
    if (!empty($info['predicates']) && !in_array($field, $ignored_fields)) {
      if (count($info['predicates']) != count(array_filter($info['predicates'], 'schemaorg_filter_schema_term'))) {
        $schemaorg_mappings = TRUE;
        break;
      }
    }
  }
  if ($schemaorg_mappings) {
    // Specifies the title/name mapping as expected by schema.org. This mapping
    // is always set to schema:name and is not exposed in the UI.
    // The label of an entity is usually either 'title' (e.g. node) or
    // 'name' (e.g. user).
    if (!empty($mapping['title'])) {
      $mapping['title']['predicates'] = array('schema:name');
    }
    if (!empty($mapping['name'])) {
      $mapping['name']['predicates'] = array('schema:name');
    }
    // Sets the mapping for the url of the entity. This mapping is always set
    // to schema:url and is not exposed in the UI.
    $mapping['url']['predicates'] = array('schema:url');
    $mapping['url']['type'] = 'rel';
    // Add schema:Person type to user mapping.
    if ($entity_type == 'user' && $bundle == 'user' ) {
      $mapping['rdftype'] = schemaorg_terms_merge('Person', $mapping['rdftype']);
    }
  }
  else {
    // Makes sure no schema.org mapping for title/name remains if no schema.org
    // terms are used.
    if (!empty($mapping['title'])) {
      $mapping['title']['predicates'] = array_filter($mapping['title']['predicates'], 'schemaorg_filter_schema_term');
    }
    if (!empty($mapping['name'])) {
      $mapping['name']['predicates'] = array_filter($mapping['name']['predicates'], 'schemaorg_filter_schema_term');
    }
    // Since this pseudo-field mapping is only used for the purpose of
    // schema.org, it is entirely removed.
    unset($mapping['url']);
    // Remove schema.org type from the user mapping.
    if ($entity_type == 'user' && $bundle == 'user' ) {
      $mapping['rdftype'] = array_filter($mapping['rdftype'], 'schemaorg_filter_schema_term');
    }
  }

  rdf_mapping_save(array(
    'type' => $entity_type,
    'bundle' => $bundle,
    'mapping' => $mapping,
    )
  );
}

/**
 * Implements hook_entity_view().
 */
function schemaorg_entity_view($entity, $type, $view_mode, $langcode) {
  // Adds the schema.org url to the entity content as RDF metadata.
  if (!empty($entity->rdf_mapping['url']['predicates'])) {
    $attributes = rdf_rdfa_attributes($entity->rdf_mapping['url']);
    $uri = entity_uri($type, $entity);
    $attributes['resource'] = url($uri['path'], $uri['options']);
    $entity->content['schemaorg_url'] = array(
      '#markup' => theme('rdf_metadata', array('metadata' => array('span' => $attributes))),
      '#weight' => 100,
    );
  }

  // It seems parsers are expecting to find the title/name of the entity within
  // the main content of the entity. Drupal displays the title outside the main
  // content on full entity display, so we assert it as hidden RDF metadata.
  foreach (array('title', 'subject', 'name') as $field_name) {
    if (!empty($entity->{$field_name})) {
      $label_field = $field_name;
      break;
    }
  }
  if (isset($label_field) && !empty($entity->rdf_mapping[$label_field]['predicates'])) {
    $attributes = rdf_rdfa_attributes($entity->rdf_mapping[$label_field]);
    $attributes['content'] = $entity->{$label_field};
    $entity->content['schemaorg_name'] = array(
      '#markup' => theme('rdf_metadata', array('metadata' => array('span' => $attributes))),
      '#weight' => 100,
    );
  }
}

/**
 * Loads the schema.org term for a particular Drupal field or rdftype.
 */
function schemaorg_term_load($type, $bundle, $field) {
  $terms = array();
  $mapping = rdf_mapping_load($type, $bundle);
  if ($field == 'rdftype') {
    $terms = $mapping['rdftype'];
  }
  elseif (!empty($mapping[$field]['predicates'])) {
    $terms = $mapping[$field]['predicates'];
  }
  // Return the first schema: term.
  foreach ($terms as $term) {
    if (strpos(trim($term), 'schema:') === 0) {
      return str_replace('schema:', '', $term);
    }
  }
}

/**
 * Add, update or remove a schema term from a set of terms.
 */
function schemaorg_terms_merge($schema_term, $terms) {
  // Strip out existing schema.org mappings.
  if (empty($terms)) {
    $terms = array();
  }
  $terms = array_filter($terms, 'schemaorg_filter_schema_term');

  if ($schema_term) {
    // Place the schema term first for commodity so it appears first in the
    // list of CURIEs in the HTML output.
    array_unshift($terms, 'schema:' . $schema_term);
  }
  return $terms;
}

/**
 * Filters out non schema: terms.
 *
 * @see schemaorg_terms_merge()
 */
function schemaorg_filter_schema_term($term) {
  return strpos(trim($term), 'schema:') !== 0;
}

/**
 * Implements hook_rdf_namespaces().
 */
function schemaorg_rdf_namespaces() {
  return array(
    'schema' => 'http://schema.org/',
  );
}

/**
 * Implementation of hook_features_api().
 */
function schemaorg_features_api() {
  return array(
    'schemaorg' => array(
      'name' => t('Schema.org mappings'),
      'default_hook' => 'rdf_default_mappings',
      'file' => drupal_get_path('module', 'schemaorg') .'/schemaorg.features.inc',
    ),
  );
}
